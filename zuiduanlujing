#include <stdio.h>
#include <iostream>
#include<stdlib.h>
#include<conio.h>
#include <malloc.h>
#include<string.h>
#include<windows.h>
#define MAX 10000
#define MAXLEN 8
#define ADJTYPE int


using namespace std;
typedef struct                            //图中顶点表示点，存放点名称
{
    char name[30];
    int num;
}VEXTYPE;
typedef struct
{
    VEXTYPE vexs[MAXLEN];               //顶点的信息
    ADJTYPE arcs[MAXLEN][MAXLEN];      //邻接矩阵
    int vexnum,arcnum ;                      //顶点数和边数
}MGraph;
MGraph b;
MGraph InitGraph()
{                                      /*建立无向网的邻接矩阵结构*/
    int i, j;
    MGraph G;
    G.vexnum =8;                            //存放顶点数
    G.arcnum =13;                           //存放边点数
    for(i=0;i<G.vexnum;i++)
    G.vexs[i].num=i;
    strcpy(G.vexs[0].name,"第四教学楼");
    strcpy(G.vexs[1].name,"第三教学楼");
    strcpy(G.vexs[2].name,"图书馆");
    strcpy(G.vexs[3].name,"食堂");
    strcpy(G.vexs[4].name,"第一教学楼");
    strcpy(G.vexs[5].name,"第二教学楼");
    strcpy(G.vexs[6].name,"综合实验楼");
    strcpy(G.vexs[7].name,"校医院");
    for(i=0;i<G.vexnum;i++)
        for(j=0;j<G.vexnum;j++)
            G.arcs[i][j]=MAX;
    G.arcs[0][1]=130;
    G.arcs[0][2]=80;
    G.arcs[0][3]=260;
    G.arcs[1][3]=75;
    G.arcs[2][4]=50;
    G.arcs[3][4]=120;
    G.arcs[1][5]=265;
    G.arcs[3][5]=85;
    G.arcs[3][6]=400;
    G.arcs[4][6]=350;
    G.arcs[5][6]=120;
    G.arcs[4][7]=200;
    G.arcs[6][7]=150;
    for(i=0;i<G.vexnum;i++)
        for(j=0;j<G.vexnum;j++)
            G.arcs[j][i]=G.arcs[i][j];
    return G;
}
void Menu()                               //输出菜单
{
    int i;
    for(i=0;i<7;i++)
    cout<<"\n";
    cout<<"                              校园最短路径问题\n";
    cout<<"            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n";
    cout<<"                           输出顶点的信息------0\n";
    cout<<"                           边的信息输出--------1\n";
    cout<<"                           修改路径长度--------2\n";
    cout<<"                           求出最短路径--------3\n";
    cout<<"                           删除某个顶点--------4\n";
    cout<<"                           删除某条边----------5\n";
    cout<<"                           插入某条边----------6\n";
    cout<<"                           退出----------------7\n";
    cout<<"            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n";
    cout<<"                                                          设计者：软件19-3 初嘉旭\n";
    cout<<"                         请选择您需要的操作：";
}
void PutOutVex(MGraph *G)                 //输出每个顶点的信息
{
    int v;
    for(v=0;v<G->vexnum;v++)
        cout<<G->vexs[v].num<<G->vexs[v].name<<endl;
    Sleep(5000);
    system("cls");
}
void PutOutArc(MGraph *G)                 //输出每条边的信息
{
    for(int i=0;i<G->vexnum;i++)
        for(int j=0;j<G->vexnum;j++)
            if(G->arcs[i][j]<MAX)
            {
                cout<<"从" <<G->vexs[i].name<<"到"<<G->vexs[j].name<<G->arcs[i][j]<<endl;
            }
    Sleep(5000);
    system("cls");
}
void Change(MGraph *G)                    //修改
{
    int v0,v1,length;
    cout<<"change\n";
    cin>>v0;
    cin>>v1;
    cout<<"length:";
    cin>>length;
    G->arcs[v0][v1]=G->arcs[v1][v0]=length;
    Sleep(5000);
    system("cls");
}

void Dijkstra(MGraph * G)                  //Dijkstra算法求最短路径
{
    int v,w,i,min,t=0,x,v0,v1;
    int final[20], D[20], p[20][20];
    cout<<"0为第四教学楼\n";
    cout<<"1为第三教学楼\n";
    cout<<"2为图书馆\n";
    cout<<"3为食堂\n";
    cout<<"4为第一教学楼\n";
    cout<<"5第二教学楼\n";
    cout<<"6为综合实验楼\n";
    cout<<"7为校医院\n";
    cout<<"请输入源顶点:";
    cin>>v0;
    if(v0<0||v0>G->vexnum)
    {
        cout<<"此点编号不存在!请重新输入顶点编号:";
        cin>>v0;
    }
        cout<<"请输入结束顶点:";
        cin>>v1;
    if(v1<0||v1>G->vexnum)
    {
        cout<<"此点编号不存在!请重新输入顶点编号:";
        cin>>v1;
    }
    for(v=0;v<G->vexnum;v++)
    {// 初始化final[20],p[20][20],final[v]=1即已经求得v0到v的最短路径，
    //p[v][w]=1则是w从v0到v当前求得最短路径上的顶点，D[v]带权长度
        final[v]=0;
        D[v]=G->arcs[v0][v];
        for(w=0;w<G->vexnum;w++)
        p[v][w]=0;
        if(D[v]<MAX)
        {
            p[v][v0]=1;p[v][v]=1;
        }
    }
    D[v0]=0;final[v0]=1;
    for(i=1;i<G->vexnum;i++)
    {
        min=MAX;
        for(w=0;w<G->vexnum;w++)
        if(!final[w])
        if(D[w]<min){v=w;min=D[w];}
        final[v]=1;
        for(w=0;w<G->vexnum;w++)
        if(!final[w]&&(min+G->arcs[v][w]<D[w]))
        {
            D[w]=min+G->arcs[v][w];
            for(x=0;x<G->vexnum;x++)
                p[w][x]=p[v][x];
                p[w][w]=1;
        }
    }
    cout<<"从"<<G->vexs[v0].name<<"到"<<G->vexs[v1].name<<"的最短路径长度为："<<D[v1]<<endl;
    cout<<"路径为：";
    for(int j=0;j<G->vexnum;j++)
    {
        if(p[v1][j]==1)
        {
        cout<<"-->";
        cout<<G->vexs[j].name<<endl;
        }
    }
    Sleep(5000);
    system("cls");
}
void DeleteVex(MGraph *G)                  //删除某个顶点
{
	int row,col;
	int v0;
	cout<<"请输入要删除的顶点:";
	cin>>v0;
	for(int i=v0;i<G->vexnum;i++)
		G->vexs[i]=G->vexs[i+1];
	G->vexnum--;
	for(row=0;row<G->vexnum;row++)
		{
			for(col=v0;col<G->vexnum;col++)
				G->arcs[row][col]=G->arcs[row][col+1];
		}
	for(col=0;col<G->vexnum;col++)
		{
			for(row=v0;row<G->vexnum;row++)
			G->arcs[col][row]=G->arcs[col][row+1];
		}
    Sleep(5000);
    system("cls");
}

void DeleteArc(MGraph *G)                  //删除某条边
{
    int v0,v1;
    cout<<"请输入两顶点:\n";
    cin>>v0>>v1;
    G->arcs[v0][v1]=MAX;
    G->arcs[v1][v0]=MAX;
    Sleep(5000);
    system("cls");
}
void InsertArc(MGraph *G)                  //插入某条边
{
    int v0,v1,l=0;
    cout<<"请输入两顶点:\n";
    cin>>v0>>v1;
    cout<<"请输入路径长度:\n";
    cin>>l;
    G->arcs[v0][v1]=l;
    G->arcs[v1][v0]=l;
    Sleep(5000);
    system("cls");
}

int main()                                //主函数
{
    int a;
    b=InitGraph();
    Menu();
    cin>>                      a;
    while(a!=7)
    {
    switch(a)
        {
            case 0:
                PutOutVex(&b);Menu();break;
            case 1:
                PutOutArc(&b);Menu();break;
            case 2:
                Change(&b);Menu();break;
            case 3:
                Dijkstra(&b);Menu();break;
            case 4:
                DeleteVex(&b);Menu();break;
            case 5:
                DeleteArc(&b);Menu();break;
            case 6:
                InsertArc(&b);Menu();break;
            case 7:
                exit(1);break;
            default:
                break;
        }
    cin>>a;
    }
}
